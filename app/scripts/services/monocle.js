// Generated by CoffeeScript 1.6.3
(function() {
  var strapApp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  strapApp = angular.module('artisanApp');

  strapApp.factory('monocle', [
    '$http', 'parseWrapper', function($http, parseWrapper) {
      var Color, Material, Model, Size, Strap, User, monocle;
      Strap = (function(_super) {
        __extends(Strap, _super);

        function Strap(objectId) {
          Strap.__super__.constructor.call(this, objectId);
        }

        Strap.parseClassName = "Strap";

        Strap.register = function() {
          return {
            imgUrl: void 0,
            barcode: void 0,
            cost: void 0,
            gender: void 0,
            length: void 0,
            msrp: void 0,
            modelNo: void 0,
            price: void 0,
            title: void 0,
            color: void 0,
            material: void 0,
            model: void 0,
            size: void 0
          };
        };

        return Strap;

      })(parseWrapper.Resource);
      Color = (function(_super) {
        __extends(Color, _super);

        function Color(objectId) {
          Color.__super__.constructor.call(this, objectId);
        }

        Color.parseClassName = "Color";

        Color.register = function() {
          return {
            name: void 0,
            number: void 0,
            rgb: void 0
          };
        };

        return Color;

      })(parseWrapper.Resource);
      Material = (function(_super) {
        __extends(Material, _super);

        function Material(objectId) {
          Material.__super__.constructor.call(this, objectId);
        }

        Material.parseClassName = "Material";

        Material.register = function() {
          return {
            name: void 0
          };
        };

        return Material;

      })(parseWrapper.Resource);
      Model = (function(_super) {
        __extends(Model, _super);

        function Model(objectId) {
          Model.__super__.constructor.call(this, objectId);
        }

        Model.parseClassName = "Model";

        Model.register = function() {
          return {
            name: void 0,
            number: void 0,
            msrp: void 0
          };
        };

        return Model;

      })(parseWrapper.Resource);
      Size = (function(_super) {
        __extends(Size, _super);

        function Size(objectId) {
          Size.__super__.constructor.call(this, objectId);
        }

        Size.parseClassName = "Size";

        Size.register = function() {
          return {
            sizeInMillimeters: void 0
          };
        };

        return Size;

      })(parseWrapper.Resource);
      User = (function(_super) {
        __extends(User, _super);

        function User(objectId) {
          User.__super__.constructor.call(this, objectId);
        }

        User.register = function() {
          var props;
          props = {
            username: void 0,
            fullname: void 0,
            email: void 0,
            shoppingCart: new parseWrapper.Collection('Strap')
          };
          angular.extend(props, parseWrapper.User.register());
          return props;
        };

        return User;

      })(parseWrapper.User);
      monocle = {
        initialize: function() {
          $http.defaults.headers.common['X-Parse-Application-Id'] = 'ZbDr2YfdSml61bcJGGKAqg25YYI1zhycsYLj7gF8';
          return $http.defaults.headers.common['X-Parse-REST-API-Key'] = '0jAJPgQ8VqIikLsrAPLwrscwO3kaNMre7mF6MxdV';
        }
      };
      monocle.Strap = parseWrapper.Resource.registerResource(Strap);
      monocle.Color = parseWrapper.Resource.registerResource(Color);
      monocle.Material = parseWrapper.Resource.registerResource(Material);
      monocle.Model = parseWrapper.Resource.registerResource(Model);
      monocle.User = parseWrapper.Resource.registerResource(User);
      monocle.Size = parseWrapper.Resource.registerResource(Size);
      monocle.initialize();
      return monocle;
    }
  ]);

}).call(this);

/*
//@ sourceMappingURL=monocle.map
*/
